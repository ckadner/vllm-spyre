name: test-sypre

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

defaults:
  run:
    shell: bash

env:
  TEST_IMAGE_NAME: "vllm-spyre"
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    env:
      # CACHE_IMAGE: "ghcr.io/vllm-project/vllm-spyre:test-cache"  # TODO: reenable
      CACHE_IMAGE: "ghcr.io/ckadner/vllm-spyre:test-cache"         # TODO: remove
      CACHE_REGISTRY: "ghcr.io"

    steps:
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Log in to cache image container registry"
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          # username: ${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set build cache target"
        run: |
          # For push to `main` (PR merged), push a new cache image with all layers (cache-mode=max).
          # For PR builds, use GitHub action cache which isolates cached layers by PR/branch.
          # to optimize builds for subsequent pushes to the same PR/branch.
          # Do not set a cache-to image for PR builds to not overwrite the `main` cache image and
          # to not ping-pong cache images for two or more different PRs.
          # Do not push cache images for each PR or multiple branches to not exceed GitHub package
          # usage and traffic limitations.
          # UPDATE 2024/02/26: GHA cache appears to have issues, cannot use `cache-to: gha,mode=min`
          # if `cache-from: registry,...,mode=max` but `cache-to: gha,mode=max` it takes longer than
          # uncached build and exhausts GHA cache size, so use cache `type=inline` (no external cache).
          # TODO: reevaluate findings above
          if [ "${{ github.event_name }}" == "pull_request" ]
          then
              #CACHE_TO="type=gha,mode=min"
              CACHE_TO="type=inline"
          else
              CACHE_TO="type=registry,ref=${{ env.CACHE_IMAGE }},mode=max"
          fi
          echo "CACHE_TO=$CACHE_TO" >> "$GITHUB_ENV"

      - name: "Build test image"
        uses: docker/build-push-action@v5
        with:
          context: .
          # file: Dockerfile.spyre
          target: "spyre-tests"
          tags: ${{ env.TEST_IMAGE_NAME }}
          cache-from: |
              type=gha
              type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: ${{ env.CACHE_TO }}
          outputs: type=docker,dest=${{ runner.temp }}/test_image.tar

      - name: "Upload test image"
        uses: actions/upload-artifact@v4
        with:
          name: "test-image"
          path: ${{ runner.temp }}/test_image.tar
          retention-days: 1         

  test-spyre-v0:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: "Checkout"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Download test image"
      uses: actions/download-artifact@v4
      with:
        name: "test-image"
        path: ${{ runner.temp }}

    - name: "Load Docker image"
      run: |
        docker load --input ${{ runner.temp }}/test_image.tar
        docker image ls -a

    - name: Run Spyre tests in docker container (vLLM v0)
      run: |
        docker run -i --rm --entrypoint /bin/bash ${{ env.TEST_IMAGE_NAME }} -c '''
          cd vllm-spyre && \
          python -m pytest --timeout=300  tests -v -k "V0 and eager"
        '''

  test-spyre-v1:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: "Checkout"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Download test image"
      uses: actions/download-artifact@v4
      with:
        name: "test-image"
        path: ${{ runner.temp }}

    - name: "Load Docker image"
      run: |
        docker load --input ${{ runner.temp }}/test_image.tar
        docker image ls -a

    - name: Run Spyre tests in docker container (vLLM v0)
      run: |
        docker run -i --rm --entrypoint /bin/bash ${{ env.TEST_IMAGE_NAME }} -c '''
          cd vllm-spyre && \
          python -m pytest --forked --timeout=300  tests -v -k "V1 and eager"
        '''
